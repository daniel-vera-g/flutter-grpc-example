// Code generated by protoc-gen-go. DO NOT EDIT.
// source: joke-service.proto

package proto3

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RespondRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondRequest) Reset()         { *m = RespondRequest{} }
func (m *RespondRequest) String() string { return proto.CompactTextString(m) }
func (*RespondRequest) ProtoMessage()    {}
func (*RespondRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3bc6c7af4464e26, []int{0}
}

func (m *RespondRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespondRequest.Unmarshal(m, b)
}
func (m *RespondRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespondRequest.Marshal(b, m, deterministic)
}
func (m *RespondRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondRequest.Merge(m, src)
}
func (m *RespondRequest) XXX_Size() int {
	return xxx_messageInfo_RespondRequest.Size(m)
}
func (m *RespondRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondRequest proto.InternalMessageInfo

func (m *RespondRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RespondReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespondReply) Reset()         { *m = RespondReply{} }
func (m *RespondReply) String() string { return proto.CompactTextString(m) }
func (*RespondReply) ProtoMessage()    {}
func (*RespondReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3bc6c7af4464e26, []int{1}
}

func (m *RespondReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespondReply.Unmarshal(m, b)
}
func (m *RespondReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespondReply.Marshal(b, m, deterministic)
}
func (m *RespondReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondReply.Merge(m, src)
}
func (m *RespondReply) XXX_Size() int {
	return xxx_messageInfo_RespondReply.Size(m)
}
func (m *RespondReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondReply.DiscardUnknown(m)
}

var xxx_messageInfo_RespondReply proto.InternalMessageInfo

func (m *RespondReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*RespondRequest)(nil), "proto3.RespondRequest")
	proto.RegisterType((*RespondReply)(nil), "proto3.RespondReply")
}

func init() { proto.RegisterFile("joke-service.proto", fileDescriptor_b3bc6c7af4464e26) }

var fileDescriptor_b3bc6c7af4464e26 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xca, 0xcf, 0x4e,
	0xd5, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x03, 0x53, 0xc6, 0x4a, 0x2a, 0x5c, 0x7c, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0x29, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x12, 0x17, 0x0f, 0x5c, 0x55, 0x41, 0x4e, 0x25, 0x36,
	0x35, 0x46, 0x2e, 0x5c, 0x9c, 0x50, 0x35, 0xa9, 0x45, 0x42, 0xe6, 0x5c, 0xec, 0x50, 0x8e, 0x90,
	0x18, 0xc4, 0x46, 0x63, 0x3d, 0x54, 0x7b, 0xa4, 0x44, 0x30, 0xc4, 0x0b, 0x72, 0x2a, 0x93, 0xa0,
	0xee, 0x02, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x50, 0x17, 0x9e, 0xb4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ResponderClient is the client API for Responder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResponderClient interface {
	Respond(ctx context.Context, in *RespondRequest, opts ...grpc.CallOption) (*RespondReply, error)
}

type responderClient struct {
	cc *grpc.ClientConn
}

func NewResponderClient(cc *grpc.ClientConn) ResponderClient {
	return &responderClient{cc}
}

func (c *responderClient) Respond(ctx context.Context, in *RespondRequest, opts ...grpc.CallOption) (*RespondReply, error) {
	out := new(RespondReply)
	err := c.cc.Invoke(ctx, "/proto3.Responder/Respond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResponderServer is the server API for Responder service.
type ResponderServer interface {
	Respond(context.Context, *RespondRequest) (*RespondReply, error)
}

// UnimplementedResponderServer can be embedded to have forward compatible implementations.
type UnimplementedResponderServer struct {
}

func (*UnimplementedResponderServer) Respond(ctx context.Context, req *RespondRequest) (*RespondReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respond not implemented")
}

func RegisterResponderServer(s *grpc.Server, srv ResponderServer) {
	s.RegisterService(&_Responder_serviceDesc, srv)
}

func _Responder_Respond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponderServer).Respond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto3.Responder/Respond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponderServer).Respond(ctx, req.(*RespondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Responder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto3.Responder",
	HandlerType: (*ResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Respond",
			Handler:    _Responder_Respond_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "joke-service.proto",
}
